var N=null,E="",T="t",U="u",searchIndex={};
var R=["tcpbuilder","result","tcplistener","tcpstream","socketaddr","new_v4","udpbuilder","new_v6","Binds this socket to the specified address.","udpsocket","Sets the value for the `IP_TTL` option on this socket.","Sets the value for the `IPV6_V6ONLY` option on this socket.","reuse_address","Set value for the `SO_REUSEADDR` option on this socket.","get_reuse_address","Check the `SO_REUSEADDR` option on this socket.","take_error","Get the value of the `SO_ERROR` option on this socket.","reuse_port","Set value for the `SO_REUSEPORT` option on this socket.","get_reuse_port","Check the value of the `SO_REUSEPORT` option on this socket.","option","Sets whether keepalive messages are enabled to be sent on…","duration","Returns whether keepalive messages are enabled on this…","Sets the `SO_RCVTIMEO` option for this socket.","Gets the value of the `SO_RCVTIMEO` option for this socket.","Sets the `SO_SNDTIMEO` option for this socket.","Gets the value of the `SO_SNDTIMEO` option for this socket.","only_v6","Gets the value of the `IP_TTL` option for this socket.","set_only_v6","Gets the value of the `IPV6_V6ONLY` option for this socket.","set_nonblocking","set_linger","Sets the linger duration of this socket by setting the…","reads the linger duration for this socket by getting the…","set_recv_buffer_size","Sets the value of the `SO_RCVBUF` option on this socket.","recv_buffer_size","Gets the value of the `SO_RCVBUF` option on this socket.","set_send_buffer_size","Sets the value of the `SO_SNDBUF` option on this socket.","send_buffer_size","Gets the value of the `SO_SNDBUF` option on this socket.","ipv4addr","set_ttl","ipv6addr","set_read_timeout_ms","set_read_timeout","read_timeout_ms","read_timeout","set_write_timeout_ms","set_write_timeout","write_timeout_ms","write_timeout","connect","tosocketaddrs","try_from","try_into","borrow_mut","formatter","as_raw_fd","from_raw_fd","TcpBuilder","UdpBuilder","UnixTcpBuilderExt","UnixUdpBuilderExt","TcpStreamExt","TcpListenerExt","UdpSocketExt"];

searchIndex["net2"]={"doc":"Extensions to `std::net` networking types.","i":[[3,R[65],"net2","An \"in progress\" TCP socket which has not yet been…",N,N],[3,R[66],E,"An \"in progress\" UDP socket which has not yet been…",N,N],[11,R[5],E,"Constructs a new TcpBuilder with the `AF_INET` domain, the…",0,[[],[[R[1],[R[0]]],[R[0]]]]],[11,R[7],E,"Constructs a new TcpBuilder with the `AF_INET6` domain,…",0,[[],[[R[1],[R[0]]],[R[0]]]]],[11,"bind",E,R[8],0,[[["self"],[T]],[[R[0]],[R[1],[R[0]]]]]],[11,"listen",E,"Mark a socket as ready to accept incoming connection…",0,[[["self"],["i32"]],[[R[2]],[R[1],[R[2]]]]]],[11,R[57],E,"Initiate a connection on this socket to the specified…",0,[[["self"],[T]],[[R[3]],[R[1],[R[3]]]]]],[11,"to_tcp_stream",E,"Converts this builder into a `TcpStream`",0,[[["self"]],[[R[3]],[R[1],[R[3]]]]]],[11,"to_tcp_listener",E,"Converts this builder into a `TcpListener`",0,[[["self"]],[[R[2]],[R[1],[R[2]]]]]],[11,"local_addr",E,"Returns the address of the local half of this TCP socket.",0,[[["self"]],[[R[1],[R[4]]],[R[4]]]]],[11,R[5],E,"Constructs a new UdpBuilder with the `AF_INET` domain, the…",1,[[],[[R[1],[R[6]]],[R[6]]]]],[11,R[7],E,"Constructs a new UdpBuilder with the `AF_INET6` domain,…",1,[[],[[R[1],[R[6]]],[R[6]]]]],[11,"bind",E,R[8],1,[[["self"],[T]],[[R[9]],[R[1],[R[9]]]]]],[11,"ttl",E,R[10],0,[[["self"],["u32"]],[[R[1]],["self"]]]],[11,R[30],E,R[11],0,[[["self"],["bool"]],[[R[1]],["self"]]]],[11,R[12],E,R[13],0,[[["self"],["bool"]],[[R[1]],["self"]]]],[11,R[14],E,R[15],0,[[["self"]],[["bool"],[R[1],["bool"]]]]],[11,R[16],E,R[17],0,[[["self"]],[[R[22],["error"]],[R[1],[R[22]]]]]],[11,"ttl",E,R[10],1,[[["self"],["u32"]],[[R[1]],["self"]]]],[11,R[30],E,R[11],1,[[["self"],["bool"]],[[R[1]],["self"]]]],[11,R[12],E,R[13],1,[[["self"],["bool"]],[[R[1]],["self"]]]],[11,R[14],E,R[15],1,[[["self"]],[["bool"],[R[1],["bool"]]]]],[11,R[16],E,R[17],1,[[["self"]],[[R[22],["error"]],[R[1],[R[22]]]]]],[0,"unix",E,"Unix-specific extensions to the `std::net` types.",N,N],[8,R[67],"net2::unix","Unix-specific extensions for the `TcpBuilder` type in this…",N,N],[10,R[18],E,R[19],2,[[["self"],["bool"]],[[R[1]],["self"]]]],[10,R[20],E,R[21],2,[[["self"]],[["bool"],[R[1],["bool"]]]]],[8,R[68],E,"Unix-specific extensions for the `UdpBuilder` type in this…",N,N],[10,R[18],E,R[19],3,[[["self"],["bool"]],[[R[1]],["self"]]]],[10,R[20],E,R[21],3,[[["self"]],[["bool"],[R[1],["bool"]]]]],[8,R[69],"net2","Extension methods for the standard [`TcpStream`…",N,N],[10,"set_nodelay",E,"Sets the value of the `TCP_NODELAY` option on this socket.",4,[[["self"],["bool"]],[R[1]]]],[10,"nodelay",E,"Gets the value of the `TCP_NODELAY` option on this socket.",4,[[["self"]],[["bool"],[R[1],["bool"]]]]],[10,R[38],E,R[39],4,[[["self"],["usize"]],[R[1]]]],[10,R[40],E,R[41],4,[[["self"]],[["usize"],[R[1],["usize"]]]]],[10,R[42],E,R[43],4,[[["self"],["usize"]],[R[1]]]],[10,R[44],E,R[45],4,[[["self"]],[["usize"],[R[1],["usize"]]]]],[10,"set_keepalive_ms",E,R[23],4,[[["self"],["u32"],[R[22],["u32"]]],[R[1]]]],[10,"keepalive_ms",E,R[25],4,[[["self"]],[[R[1],[R[22]]],[R[22],["u32"]]]]],[10,"set_keepalive",E,R[23],4,[[["self"],[R[24]],[R[22],[R[24]]]],[R[1]]]],[10,"keepalive",E,R[25],4,[[["self"]],[[R[1],[R[22]]],[R[22],[R[24]]]]]],[10,R[49],E,R[26],4,[[["self"],["u32"],[R[22],["u32"]]],[R[1]]]],[10,R[50],E,R[26],4,[[["self"],[R[24]],[R[22],[R[24]]]],[R[1]]]],[10,R[51],E,R[27],4,[[["self"]],[[R[1],[R[22]]],[R[22],["u32"]]]]],[10,R[52],E,R[27],4,[[["self"]],[[R[1],[R[22]]],[R[22],[R[24]]]]]],[10,R[53],E,R[28],4,[[["self"],["u32"],[R[22],["u32"]]],[R[1]]]],[10,R[54],E,R[28],4,[[["self"],[R[24]],[R[22],[R[24]]]],[R[1]]]],[10,R[55],E,R[29],4,[[["self"]],[[R[1],[R[22]]],[R[22],["u32"]]]]],[10,R[56],E,R[29],4,[[["self"]],[[R[1],[R[22]]],[R[22],[R[24]]]]]],[10,R[47],E,R[10],4,[[["self"],["u32"]],[R[1]]]],[10,"ttl",E,R[31],4,[[["self"]],[[R[1],["u32"]],["u32"]]]],[10,R[32],E,R[11],4,[[["self"],["bool"]],[R[1]]]],[10,R[30],E,R[33],4,[[["self"]],[["bool"],[R[1],["bool"]]]]],[10,R[57],E,"Executes a `connect` operation on this socket,…",4,[[["self"],[R[58]]],[R[1]]]],[10,R[16],E,R[17],4,[[["self"]],[[R[22],["error"]],[R[1],[R[22]]]]]],[10,R[34],E,"Moves this TCP stream into or out of nonblocking mode.",4,[[["self"],["bool"]],[R[1]]]],[10,R[35],E,R[36],4,[[["self"],[R[24]],[R[22],[R[24]]]],[R[1]]]],[10,"linger",E,R[37],4,[[["self"]],[[R[1],[R[22]]],[R[22],[R[24]]]]]],[8,R[70],E,"Extension methods for the standard [`TcpListener`…",N,N],[10,R[47],E,R[10],5,[[["self"],["u32"]],[R[1]]]],[10,"ttl",E,R[31],5,[[["self"]],[[R[1],["u32"]],["u32"]]]],[10,R[32],E,R[11],5,[[["self"],["bool"]],[R[1]]]],[10,R[30],E,R[33],5,[[["self"]],[["bool"],[R[1],["bool"]]]]],[10,R[16],E,R[17],5,[[["self"]],[[R[22],["error"]],[R[1],[R[22]]]]]],[10,R[34],E,"Moves this TCP listener into or out of nonblocking mode.",5,[[["self"],["bool"]],[R[1]]]],[10,R[35],E,R[36],5,[[["self"],[R[24]],[R[22],[R[24]]]],[R[1]]]],[10,"linger",E,R[37],5,[[["self"]],[[R[1],[R[22]]],[R[22],[R[24]]]]]],[8,R[71],E,"Extension methods for the standard [`UdpSocket`…",N,N],[10,R[38],E,R[39],6,[[["self"],["usize"]],[R[1]]]],[10,R[40],E,R[41],6,[[["self"]],[["usize"],[R[1],["usize"]]]]],[10,R[42],E,R[43],6,[[["self"],["usize"]],[R[1]]]],[10,R[44],E,R[45],6,[[["self"]],[["usize"],[R[1],["usize"]]]]],[10,"set_broadcast",E,"Sets the value of the `SO_BROADCAST` option for this socket.",6,[[["self"],["bool"]],[R[1]]]],[10,"broadcast",E,"Gets the value of the `SO_BROADCAST` option for this socket.",6,[[["self"]],[["bool"],[R[1],["bool"]]]]],[10,"set_multicast_loop_v4",E,"Sets the value of the `IP_MULTICAST_LOOP` option for this…",6,[[["self"],["bool"]],[R[1]]]],[10,"multicast_loop_v4",E,"Gets the value of the `IP_MULTICAST_LOOP` option for this…",6,[[["self"]],[["bool"],[R[1],["bool"]]]]],[10,"set_multicast_ttl_v4",E,"Sets the value of the `IP_MULTICAST_TTL` option for this…",6,[[["self"],["u32"]],[R[1]]]],[10,"multicast_ttl_v4",E,"Gets the value of the `IP_MULTICAST_TTL` option for this…",6,[[["self"]],[[R[1],["u32"]],["u32"]]]],[10,"set_multicast_hops_v6",E,"Sets the value of the `IPV6_MULTICAST_HOPS` option for…",6,[[["self"],["u32"]],[R[1]]]],[10,"multicast_hops_v6",E,"Gets the value of the `IPV6_MULTICAST_HOPS` option for…",6,[[["self"]],[[R[1],["u32"]],["u32"]]]],[10,"set_multicast_loop_v6",E,"Sets the value of the `IPV6_MULTICAST_LOOP` option for…",6,[[["self"],["bool"]],[R[1]]]],[10,"multicast_loop_v6",E,"Gets the value of the `IPV6_MULTICAST_LOOP` option for…",6,[[["self"]],[["bool"],[R[1],["bool"]]]]],[10,"set_multicast_if_v4",E,"Sets the value of the `IP_MULTICAST_IF` option for this…",6,[[["self"],[R[46]]],[R[1]]]],[10,"multicast_if_v4",E,"Gets the value of the `IP_MULTICAST_IF` option for this…",6,[[["self"]],[[R[46]],[R[1],[R[46]]]]]],[10,"set_multicast_if_v6",E,"Sets the value of the `IPV6_MULTICAST_IF` option for this…",6,[[["self"],["u32"]],[R[1]]]],[10,"multicast_if_v6",E,"Gets the value of the `IPV6_MULTICAST_IF` option for this…",6,[[["self"]],[[R[1],["u32"]],["u32"]]]],[10,R[47],E,R[10],6,[[["self"],["u32"]],[R[1]]]],[10,"ttl",E,R[31],6,[[["self"]],[[R[1],["u32"]],["u32"]]]],[10,"set_unicast_hops_v6",E,"Sets the value for the `IPV6_UNICAST_HOPS` option on this…",6,[[["self"],["u32"]],[R[1]]]],[10,"unicast_hops_v6",E,"Gets the value of the `IPV6_UNICAST_HOPS` option for this…",6,[[["self"]],[[R[1],["u32"]],["u32"]]]],[10,R[32],E,R[11],6,[[["self"],["bool"]],[R[1]]]],[10,R[30],E,R[33],6,[[["self"]],[["bool"],[R[1],["bool"]]]]],[10,"join_multicast_v4",E,"Executes an operation of the `IP_ADD_MEMBERSHIP` type.",6,[[["self"],[R[46]]],[R[1]]]],[10,"join_multicast_v6",E,"Executes an operation of the `IPV6_ADD_MEMBERSHIP` type.",6,[[[R[48]],["self"],["u32"]],[R[1]]]],[10,"leave_multicast_v4",E,"Executes an operation of the `IP_DROP_MEMBERSHIP` type.",6,[[["self"],[R[46]]],[R[1]]]],[10,"leave_multicast_v6",E,"Executes an operation of the `IPV6_DROP_MEMBERSHIP` type.",6,[[[R[48]],["self"],["u32"]],[R[1]]]],[10,R[49],E,R[26],6,[[["self"],["u32"],[R[22],["u32"]]],[R[1]]]],[10,R[50],E,R[26],6,[[["self"],[R[24]],[R[22],[R[24]]]],[R[1]]]],[10,R[51],E,R[27],6,[[["self"]],[[R[1],[R[22]]],[R[22],["u32"]]]]],[10,R[52],E,R[27],6,[[["self"]],[[R[1],[R[22]]],[R[22],[R[24]]]]]],[10,R[53],E,R[28],6,[[["self"],["u32"],[R[22],["u32"]]],[R[1]]]],[10,R[54],E,R[28],6,[[["self"],[R[24]],[R[22],[R[24]]]],[R[1]]]],[10,R[55],E,R[29],6,[[["self"]],[[R[1],[R[22]]],[R[22],["u32"]]]]],[10,R[56],E,R[29],6,[[["self"]],[[R[1],[R[22]]],[R[22],[R[24]]]]]],[10,R[16],E,R[17],6,[[["self"]],[[R[22],["error"]],[R[1],[R[22]]]]]],[10,R[57],E,"Connects this UDP socket to a remote address, allowing the…",6,[[["self"],[R[58]]],[R[1]]]],[10,"send",E,"Sends data on the socket to the remote address to which it…",6,[[["self"]],[["usize"],[R[1],["usize"]]]]],[10,"recv",E,"Receives data on the socket from the remote address to…",6,[[["self"]],[["usize"],[R[1],["usize"]]]]],[10,R[34],E,"Moves this UDP socket into or out of nonblocking mode.",6,[[["self"],["bool"]],[R[1]]]],[11,"from",E,E,0,[[[T]],[T]]],[11,"into",E,E,0,[[],[U]]],[11,R[59],E,E,0,[[[U]],[R[1]]]],[11,R[60],E,E,0,[[],[R[1]]]],[11,R[61],E,E,0,[[["self"]],[T]]],[11,"borrow",E,E,0,[[["self"]],[T]]],[11,"type_id",E,E,0,[[["self"]],["typeid"]]],[11,"from",E,E,1,[[[T]],[T]]],[11,"into",E,E,1,[[],[U]]],[11,R[59],E,E,1,[[[U]],[R[1]]]],[11,R[60],E,E,1,[[],[R[1]]]],[11,R[61],E,E,1,[[["self"]],[T]]],[11,"borrow",E,E,1,[[["self"]],[T]]],[11,"type_id",E,E,1,[[["self"]],["typeid"]]],[11,R[18],E,E,0,[[["self"],["bool"]],[[R[1]],["self"]]]],[11,R[20],E,E,0,[[["self"]],[["bool"],[R[1],["bool"]]]]],[11,R[18],E,E,1,[[["self"],["bool"]],[[R[1]],["self"]]]],[11,R[20],E,E,1,[[["self"]],[["bool"],[R[1],["bool"]]]]],[11,"fmt",E,E,0,[[["self"],[R[62]]],[R[1]]]],[11,"fmt",E,E,1,[[["self"],[R[62]]],[R[1]]]],[11,R[63],E,E,0,[[["self"]],["c_int"]]],[11,R[63],E,E,1,[[["self"]],["c_int"]]],[11,R[64],E,E,0,[[["c_int"]],[R[0]]]],[11,R[64],E,E,1,[[["c_int"]],[R[6]]]]],"p":[[3,R[65]],[3,R[66]],[8,R[67]],[8,R[68]],[8,R[69]],[8,R[70]],[8,R[71]]]};
initSearch(searchIndex);addSearchOptions(searchIndex);